name: Publish

on:
  workflow_dispatch: {}
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: pnpm

      - name: Install dependencies
        run: |
          cd lib/functions/assets-cleanup && pnpm install --frozen-lockfile && cd ../../..
          cd lib/functions/access-logs-analysis/group-by-date && pnpm install --frozen-lockfile && cd ../../../..
          cd lib/functions/access-logs-analysis/partitioning && pnpm install --frozen-lockfile && cd ../../../..
          pnpm install --frozen-lockfile

      - name: Generate changelog and bump version
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm changelogen --release
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "chore(release): v$VERSION"
          else
            echo "No changelog/package changes to commit."
          fi

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm npm publish --access public

      - name: Verify package publication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG=$(node -p "require('./package.json').name")
          VER=$(node -p "require('./package.json').version")
          PUBLISHED=$(pnpm view ${PKG}@${VER} version --registry=https://registry.npmjs.org/ || true)
          if [ "$PUBLISHED" != "$VER" ]; then
            echo "Publish failed or version mismatch (expected $VER, got $PUBLISHED)" >&2
            exit 1
          fi
          echo "Package ${PKG}@${VER} successfully published."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.changelog.outputs.version }}
          name: v${{ steps.changelog.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Backmerge master into develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin develop
          git checkout develop
          git merge --no-ff origin/master -m "chore: sync release v${{ steps.changelog.outputs.version }} back to develop"
          git push origin develop
