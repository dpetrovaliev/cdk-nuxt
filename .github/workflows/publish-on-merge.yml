name: Publish on Release Merge

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: publish-on-merge-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  publish:
    if: ${{ github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v') }}
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: pnpm

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: |
          cd lib/functions/assets-cleanup && pnpm install --frozen-lockfile && pnpm install-layer && cd ../../..
          cd lib/functions/access-logs-analysis/group-by-date && pnpm install --frozen-lockfile && pnpm install-layer && cd ../../../..
          cd lib/functions/access-logs-analysis/partitioning && pnpm install --frozen-lockfile && pnpm install-layer && cd ../../../..
          pnpm install --frozen-lockfile

      - name: Read version
        id: read_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Ensure version not on npm
        run: |
          set -euo pipefail
          PKG=$(node -p "require('./package.json').name")
          VER=${{ steps.read_version.outputs.version }}
          if pnpm view ${PKG}@${VER} version --registry=https://registry.npmjs.org/ >/dev/null 2>&1; then
            echo "${PKG}@${VER} already exists on npm" >&2
            exit 1
          fi

      - name: Pack tarball (prepack runs automatically)
        run: |
          pnpm pack --pack-destination .
          TARBALL=$(ls -1t *.tgz | head -n1)
          echo "TARBALL=$TARBALL" >> $GITHUB_ENV

      - name: Create & push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          TAG="v${{ steps.read_version.outputs.version }}"
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          TARBALL=$(ls -1t *.tgz | head -n1)
          pnpm npm publish "$TARBALL" --provenance --access public

      - name: Verify package publication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG=$(node -p "require('./package.json').name")
          VER=$(node -p "require('./package.json').version")
          PUBLISHED=$(pnpm view ${PKG}@${VER} version --registry=https://registry.npmjs.org/ || true)
          if [ "$PUBLISHED" != "$VER" ]; then
            echo "Publish failed or version mismatch (expected $VER, got $PUBLISHED)" >&2
            exit 1
          fi
          echo "Package ${PKG}@${VER} successfully published."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.read_version.outputs.version }}
          name: v${{ steps.read_version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
