import {CacheControl} from "aws-cdk-lib/aws-s3-deployment";
import {Duration} from "aws-cdk-lib";

export interface StaticAssetConfig {
    /**
     * The file pattern for the incoming requests that should be forwarded to the target path in the static assets S3 bucket
     * with the appropriate cache and content settings defined in the same object.
     */
    pattern: string,

    /**
     * The local directory to upload the files from.
     */
    source: string,

    /**
     * The remote path at which to make the uploaded files from source accessible.
     */
    target: string,

    /**
     * The content type to set for the files in the source folder when uploading them to the target.
     * Useful to override force content types for specific files.
     */
    contentType?: string,

    /**
     * The cache settings to use for the uploaded source files when accessing them on the target path with the specified pattern.
     */
    cacheControl: CacheControl[],

    /**
     * Whether to invalidate the files matching the config's pattern in the distribution's edge caches after the files are uploaded to the destination bucket.
     */
    invalidateOnChange?: boolean;
}

/**
 * Retrieves the custom static assets of the Nuxt app that shall be publicly available.
 *
 * @param srcDir The path to the directory within the root directory (`rootDir`) at which the `public` assets folder of the Nuxt app is located.
 * @param rootDir The path to the root directory of the Nuxt app at which the `.output` build folder is located.
 */
const getNuxtAppCustomAssetConfigs = (srcDir: string|undefined = undefined, rootDir: string = '.'): StaticAssetConfig[] => {

    // We copy the custom assets from the source directory to prevent overriding the build assets cache behavior
    // when copying from outputs directory
    const customAssetsSourcePath = `${rootDir}${srcDir ? `/${srcDir}` : ''}/public`;
    const customAssetsTargetPath = '/';

    // Custom assets might not be versioned whereby we want to prevent any caching issues when updating them
    // -> cache for only 1 day on CDN and 1 minute on browser
    const defaultCacheConfig = [
        CacheControl.setPublic(),
        CacheControl.maxAge(Duration.days(1)),
        CacheControl.sMaxAge(Duration.minutes(1)),
    ];

    return [

        // File to detect current deployment revision to delete outdated files of old deployments
        {
            pattern: 'app-revision',
            source: customAssetsSourcePath,
            target: customAssetsTargetPath,
            contentType: 'text/plain; charset=UTF-8',
            // Longer cache control since we automatically invalidate the revision file on every deployment
            cacheControl: [
                CacheControl.setPublic(),
                CacheControl.maxAge(Duration.seconds(10)),
                CacheControl.sMaxAge(Duration.days(14)),
            ],
            invalidateOnChange: true
        },

        // Files for native app links
        {
            pattern: '.well-known/*',
            source: customAssetsSourcePath,
            target: customAssetsTargetPath,
            contentType: 'application/json; charset=UTF-8', // Explicitly provided as these file usually have no extension
            cacheControl: defaultCacheConfig,
        },

        // E.g., robots.txt, ads.txt, sitemap.xml, *.js, manifest.webmanifest ...
        // But exclude .gitignore and other hidden files
        {
            pattern: '?*.*',
            source: customAssetsSourcePath,
            target: customAssetsTargetPath,
            contentType: undefined,
            cacheControl: defaultCacheConfig,
        },
    ];
};

/**
 * Retrieves the static assets of the Nuxt app that are generated by the build of the app.
 *
 * @param rootDir The path to the root directory of the Nuxt app at which the `.output` build folder is located.
 */
const getNuxtAppBuildAssetConfigs = (rootDir: string = '.'): StaticAssetConfig[] => {

    // The build assets required for CSR that are generated by 'nuxt build'
    const buildAssetsSourcePath = `${rootDir}/.output/public/_nuxt`;
    const buildAssetsTargetPath = ('/_nuxt/');

    // Build assets are hashed whereby they are immutable and can be cached for a long time
    const defaultCacheConfig = [
        CacheControl.setPublic(),
        CacheControl.maxAge(Duration.days(365)),
        CacheControl.fromString('immutable'),
    ];

    return [
        {
            pattern: '*.html',
            target: buildAssetsTargetPath,
            source: buildAssetsSourcePath,
            contentType: 'text/html; charset=UTF-8',
            // We do not want to cache html files on the browser as we want to be able to publish new changes quickly
            // However, we do cache the html files on CloudFront for a performance boost and invalidate the cache on every deployment
            cacheControl: [CacheControl.setPublic(), CacheControl.sMaxAge(Duration.days(7))],
            invalidateOnChange: true
        },
        {
            pattern: '*.*',
            target: buildAssetsTargetPath,
            source: buildAssetsSourcePath,
            contentType: undefined,
            cacheControl: defaultCacheConfig
        }
    ]
};

/**
 * Retrieves the static assets of the Nuxt app that shall be publicly available.
 *
 * @param srcDir The path to the directory within the root directory (`rootDir`) at which the `public` assets folder of the Nuxt app is located.
 * @param rootDir The path to the root directory of the Nuxt app at which the `.output` build folder is located.
 */
export const getNuxtAppStaticAssetConfigs = (srcDir: string|undefined = undefined, rootDir: string = '.'): StaticAssetConfig[] => {
    return [...getNuxtAppBuildAssetConfigs(rootDir), ...getNuxtAppCustomAssetConfigs(srcDir, rootDir)];
};